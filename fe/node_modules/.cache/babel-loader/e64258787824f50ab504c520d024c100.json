{"ast":null,"code":"var _jsxFileName = \"D:\\\\TMDT\\\\GreenLifeWebsite\\\\fe\\\\src\\\\store.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext();\nconst initialState = {\n  cart: {\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n  }\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      // add to cart\n      const newItem = action.payload;\n      const existItem = state.cart.cartItems.find(item => item._id === newItem._id);\n      const cartItems = existItem ? state.cart.cartItems.map(item => item._id === existItem._id ? newItem : item) : [...state.cart.cartItems, newItem];\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\n      return { ...state,\n        cart: { ...state.cart,\n          cartItems\n        }\n      };\n\n    case 'CART_REMOVE_ITEM':\n      {\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          cart: { ...state.cart,\n            cartItems\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: [props.children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["D:/TMDT/GreenLifeWebsite/fe/src/store.js"],"names":["createContext","useReducer","Store","initialState","cart","cartItems","localStorage","getItem","JSON","parse","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","setItem","stringify","filter","StoreProvider","props","dispatch","value","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;;AAEA,OAAO,MAAMC,KAAK,gBAAGF,aAAa,EAA3B;AAEP,MAAMG,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACTC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADS,GAET;AAHE;AADa,CAArB;;AAOA,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE;AACA,YAAMC,OAAO,GAAGF,MAAM,CAACG,OAAvB;AACA,YAAMC,SAAS,GAAGL,KAAK,CAACP,IAAN,CAAWC,SAAX,CAAqBY,IAArB,CACfC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACK,GADf,CAAlB;AAGA,YAAMd,SAAS,GAAGW,SAAS,GACvBL,KAAK,CAACP,IAAN,CAAWC,SAAX,CAAqBe,GAArB,CAA0BF,IAAD,IACvBA,IAAI,CAACC,GAAL,KAAaH,SAAS,CAACG,GAAvB,GAA6BL,OAA7B,GAAuCI,IADzC,CADuB,GAIvB,CAAC,GAAGP,KAAK,CAACP,IAAN,CAAWC,SAAf,EAA0BS,OAA1B,CAJJ;AAKAR,MAAAA,YAAY,CAACe,OAAb,CAAqB,WAArB,EAAkCb,IAAI,CAACc,SAAL,CAAejB,SAAf,CAAlC;AACA,aAAO,EAAE,GAAGM,KAAL;AAAYP,QAAAA,IAAI,EAAE,EAAE,GAAGO,KAAK,CAACP,IAAX;AAAiBC,UAAAA;AAAjB;AAAlB,OAAP;;AAEA,SAAK,kBAAL;AAAyB;AACvB,cAAMA,SAAS,GAAGM,KAAK,CAACP,IAAN,CAAWC,SAAX,CAAqBkB,MAArB,CACfL,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeI,GADtB,CAAlB;AAGAb,QAAAA,YAAY,CAACe,OAAb,CAAqB,WAArB,EAAkCb,IAAI,CAACc,SAAL,CAAejB,SAAf,CAAlC;AACA,eAAO,EAAE,GAAGM,KAAL;AAAYP,UAAAA,IAAI,EAAE,EAAE,GAAGO,KAAK,CAACP,IAAX;AAAiBC,YAAAA;AAAjB;AAAlB,SAAP;AACD;;AACH;AACE,aAAOM,KAAP;AAvBJ;AAyBD;;AAED,OAAO,SAASa,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AACnC,QAAM,CAACd,KAAD,EAAQe,QAAR,IAAoBzB,UAAU,CAACS,OAAD,EAAUP,YAAV,CAApC;AACA,QAAMwB,KAAK,GAAG;AAAEhB,IAAAA,KAAF;AAASe,IAAAA;AAAT,GAAd;AACA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEC,KAAvB;AAAA,eAA+BF,KAAK,CAACG,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAJeJ,a;;KAAAA,a","sourcesContent":["import { createContext, useReducer } from 'react';\r\n\r\nexport const Store = createContext();\r\n\r\nconst initialState = {\r\n  cart: {\r\n    cartItems: localStorage.getItem('cartItems')\r\n    ? JSON.parse(localStorage.getItem('cartItems'))\r\n    : [],\r\n  },\r\n};\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CART_ADD_ITEM':\r\n      // add to cart\r\n      const newItem = action.payload;\r\n      const existItem = state.cart.cartItems.find(\r\n        (item) => item._id === newItem._id\r\n      );\r\n      const cartItems = existItem\r\n        ? state.cart.cartItems.map((item) =>\r\n            item._id === existItem._id ? newItem : item\r\n          )\r\n        : [...state.cart.cartItems, newItem];\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      return { ...state, cart: { ...state.cart, cartItems } };\r\n      \r\n      case 'CART_REMOVE_ITEM': {\r\n        const cartItems = state.cart.cartItems.filter(\r\n          (item) => item._id !== action.payload._id\r\n        );\r\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n        return { ...state, cart: { ...state.cart, cartItems } };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function StoreProvider(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const value = { state, dispatch };\r\n  return <Store.Provider value={value}>{props.children} </Store.Provider>;\r\n}"]},"metadata":{},"sourceType":"module"}