{"ast":null,"code":"import _assertThisInitialized from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _createForOfIteratorHelper from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectWithoutProperties from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"D:/TMDT/GreenLifeWebsite/fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"onLoad\", \"onError\"];\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(function () {\n    if (!document) {\n      return;\n    }\n    // Find script tag with same src in DOM.\n    var foundScript = document.querySelector('script[src=\"'.concat(src, '\"]'));\n    // Call onLoad if script marked as loaded.\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    }\n    // Create or get existed tag.\n    var script = foundScript || document.createElement(\"script\");\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n    // Mark script as loaded on load event.\n    var onLoadWithMarker = function onLoadWithMarker() {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n    script.addEventListener(\"load\", onLoadWithMarker);\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n    return function () {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nfunction useLoadGoogleCharts(param) {\n  var _param$chartVersion = param.chartVersion,\n    chartVersion = _param$chartVersion === void 0 ? \"current\" : _param$chartVersion,\n    _param$chartPackages = param.chartPackages,\n    chartPackages = _param$chartPackages === void 0 ? [\"corechart\", \"controls\"] : _param$chartPackages,\n    _param$chartLanguage = param.chartLanguage,\n    chartLanguage = _param$chartLanguage === void 0 ? \"en\" : _param$chartLanguage,\n    mapsApiKey = param.mapsApiKey;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    googleCharts = _useState2[0],\n    setGoogleCharts = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    failed = _useState4[0],\n    setFailed = _useState4[1];\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", function () {\n    // @ts-expect-error Getting object from global namespace.\n    var google = window === null || window === void 0 ? void 0 : window.google;\n    if (!google) {\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey: mapsApiKey\n    });\n    google.charts.setOnLoadCallback(function () {\n      setGoogleCharts(google);\n    });\n  }, function () {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nfunction LoadGoogleCharts(param) {\n  var onLoad = param.onLoad,\n    onError = param.onError,\n    params = _objectWithoutProperties(param, _excluded);\n  var _useLoadGoogleCharts = useLoadGoogleCharts(params),\n    _useLoadGoogleCharts2 = _slicedToArray(_useLoadGoogleCharts, 2),\n    googleCharts = _useLoadGoogleCharts2[0],\n    failed = _useLoadGoogleCharts2[1];\n  useEffect(function () {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(function () {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\nvar chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: function getChartWrapper() {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nvar uniqueID = 0;\nvar generateUniqueID = function generateUniqueID() {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\nvar DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\nvar loadDataTableFromSpreadSheet = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(googleViz, spreadSheetUrl) {\n    var urlParams,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          urlParams = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n            var queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n            var gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n            var sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n            var access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n            var urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n            var urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n            var query = new googleViz.visualization.Query(urlToSpreadSheet);\n            query.send(function (response) {\n              if (response.isError()) {\n                reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n              } else {\n                resolve(response.getDataTable());\n              }\n            });\n          }));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function loadDataTableFromSpreadSheet(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar _React$createContext = /*#__PURE__*/React.createContext(chartDefaultProps),\n  Provider = _React$createContext.Provider,\n  Consumer = _React$createContext.Consumer;\nvar ContextProvider = function ContextProvider(param) {\n  var children = param.children,\n    value = param.value;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\nvar ContextConsumer = function ContextConsumer(param) {\n  var render = param.render;\n  return /*#__PURE__*/React.createElement(Consumer, null, function (context) {\n    return render(context);\n  });\n};\nvar GRAY_COLOR = \"#CCCCCC\";\nvar GoogleChartDataTableInner = /*#__PURE__*/function (_React$Component) {\n  _inherits(GoogleChartDataTableInner, _React$Component);\n  var _super = _createSuper(GoogleChartDataTableInner);\n  function GoogleChartDataTableInner() {\n    var _this2;\n    _classCallCheck(this, GoogleChartDataTableInner);\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      hiddenColumns: []\n    };\n    _this2.listenToLegendToggle = function () {\n      var _this2$props = _this2.props,\n        google = _this2$props.google,\n        googleChartWrapper = _this2$props.googleChartWrapper;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", function () {\n        var chart = googleChartWrapper.getChart();\n        var selection = chart.getSelection();\n        var dataTable = googleChartWrapper.getDataTable();\n        if (selection.length === 0 ||\n        // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n        var columnIndex = selection[0].column;\n        var columnID = _this2.getColumnID(dataTable, columnIndex);\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          _this2.setState(function (state) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              hiddenColumns: _toConsumableArray(state.hiddenColumns.filter(function (colID) {\n                return colID !== columnID;\n              }))\n            });\n          });\n        } else {\n          _this2.setState(function (state) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              hiddenColumns: [].concat(_toConsumableArray(state.hiddenColumns), [columnID])\n            });\n          });\n        }\n      });\n    };\n    _this2.applyFormatters = function (dataTable, formatters) {\n      var google = _this2.props.google;\n      var _iterator = _createForOfIteratorHelper(formatters),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var formatter = _step.value;\n          switch (formatter.type) {\n            case \"ArrowFormat\":\n              {\n                var vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n            case \"BarFormat\":\n              {\n                var _vizFormatter = new google.visualization.BarFormat(formatter.options);\n                _vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n            case \"ColorFormat\":\n              {\n                var _vizFormatter2 = new google.visualization.ColorFormat(formatter.options);\n                var ranges = formatter.ranges;\n                var _iterator2 = _createForOfIteratorHelper(ranges),\n                  _step2;\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var range = _step2.value;\n                    _vizFormatter2.addRange.apply(_vizFormatter2, _toConsumableArray(range));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                _vizFormatter2.format(dataTable, formatter.column);\n                break;\n              }\n            case \"DateFormat\":\n              {\n                var _vizFormatter3 = new google.visualization.DateFormat(formatter.options);\n                _vizFormatter3.format(dataTable, formatter.column);\n                break;\n              }\n            case \"NumberFormat\":\n              {\n                var _vizFormatter4 = new google.visualization.NumberFormat(formatter.options);\n                _vizFormatter4.format(dataTable, formatter.column);\n                break;\n              }\n            case \"PatternFormat\":\n              {\n                var _vizFormatter5 = new google.visualization.PatternFormat(formatter.options);\n                _vizFormatter5.format(dataTable, formatter.column);\n                break;\n              }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    _this2.getColumnID = function (dataTable, columnIndex) {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n    _this2.draw = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(param) {\n        var data, diffdata, rows, columns, options, legend_toggle, legendToggle, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, _this2$props2, google, googleChartWrapper, dataTable, chartDiff, oldData, newData, columnCount, i, columnID, previousColumnLabel, previousColumnID, previousColumnType, chart;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              data = param.data, diffdata = param.diffdata, rows = param.rows, columns = param.columns, options = param.options, legend_toggle = param.legend_toggle, legendToggle = param.legendToggle, chartType = param.chartType, formatters = param.formatters, spreadSheetUrl = param.spreadSheetUrl, spreadSheetQueryParameters = param.spreadSheetQueryParameters;\n              _this2$props2 = _this2.props, google = _this2$props2.google, googleChartWrapper = _this2$props2.googleChartWrapper;\n              chartDiff = null;\n              if (diffdata) {\n                oldData = google.visualization.arrayToDataTable(diffdata.old);\n                newData = google.visualization.arrayToDataTable(diffdata.new);\n                chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n              }\n              if (!(data !== null)) {\n                _context2.next = 8;\n                break;\n              }\n              if (Array.isArray(data)) {\n                dataTable = google.visualization.arrayToDataTable(data);\n              } else {\n                dataTable = new google.visualization.DataTable(data);\n              }\n              _context2.next = 19;\n              break;\n            case 8:\n              if (!(rows && columns)) {\n                _context2.next = 12;\n                break;\n              }\n              dataTable = google.visualization.arrayToDataTable([columns].concat(_toConsumableArray(rows)));\n              _context2.next = 19;\n              break;\n            case 12:\n              if (!spreadSheetUrl) {\n                _context2.next = 18;\n                break;\n              }\n              _context2.next = 15;\n              return loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n            case 15:\n              dataTable = _context2.sent;\n              _context2.next = 19;\n              break;\n            case 18:\n              dataTable = google.visualization.arrayToDataTable([]);\n            case 19:\n              columnCount = dataTable.getNumberOfColumns();\n              for (i = 0; i < columnCount; i += 1) {\n                columnID = _this2.getColumnID(dataTable, i);\n                if (_this2.state.hiddenColumns.includes(columnID)) {\n                  previousColumnLabel = dataTable.getColumnLabel(i);\n                  previousColumnID = dataTable.getColumnId(i);\n                  previousColumnType = dataTable.getColumnType(i);\n                  dataTable.removeColumn(i);\n                  dataTable.addColumn({\n                    label: previousColumnLabel,\n                    id: previousColumnID,\n                    type: previousColumnType\n                  });\n                }\n              }\n              chart = googleChartWrapper.getChart();\n              if (googleChartWrapper.getChartType() === \"Timeline\") {\n                chart && chart.clearChart();\n              }\n              googleChartWrapper.setChartType(chartType);\n              googleChartWrapper.setOptions(options || {});\n              googleChartWrapper.setDataTable(dataTable);\n              googleChartWrapper.draw();\n              if (_this2.props.googleChartDashboard !== null) {\n                _this2.props.googleChartDashboard.draw(dataTable);\n              }\n              if (chartDiff) {\n                googleChartWrapper.setDataTable(chartDiff);\n                googleChartWrapper.draw();\n              }\n              if (formatters) {\n                _this2.applyFormatters(dataTable, formatters);\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n              }\n              if (legendToggle === true || legend_toggle === true) {\n                _this2.grayOutHiddenColumns({\n                  options: options\n                });\n              }\n              return _context2.abrupt(\"return\");\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this2.grayOutHiddenColumns = function (param) {\n      var options = param.options;\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      var dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      var columnCount = dataTable.getNumberOfColumns();\n      var hasAHiddenColumn = _this2.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      var colors = Array.from({\n        length: columnCount - 1\n      }).map(function (dontcare, i) {\n        var columnID = _this2.getColumnID(dataTable, i + 1);\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions(_objectSpread(_objectSpread({}, options), {}, {\n        colors: colors\n      }));\n      googleChartWrapper.draw();\n    };\n    _this2.onResize = function () {\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      googleChartWrapper.draw();\n    };\n    return _this2;\n  }\n  _createClass(GoogleChartDataTableInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.draw(this.props);\n      window.addEventListener(\"resize\", this.onResize);\n      if (this.props.legend_toggle || this.props.legendToggle) {\n        this.listenToLegendToggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props = this.props,\n        google = _this$props.google,\n        googleChartWrapper = _this$props.googleChartWrapper;\n      window.removeEventListener(\"resize\", this.onResize);\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.draw(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return GoogleChartDataTableInner;\n}(React.Component);\nvar GoogleChartDataTable = /*#__PURE__*/function (_React$Component2) {\n  _inherits(GoogleChartDataTable, _React$Component2);\n  var _super2 = _createSuper(GoogleChartDataTable);\n  function GoogleChartDataTable() {\n    _classCallCheck(this, GoogleChartDataTable);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(GoogleChartDataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        google = _this$props2.google,\n        googleChartWrapper = _this$props2.googleChartWrapper,\n        googleChartDashboard = _this$props2.googleChartDashboard;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n            google: google,\n            googleChartWrapper: googleChartWrapper,\n            googleChartDashboard: googleChartDashboard\n          }));\n        }\n      });\n    }\n  }]);\n  return GoogleChartDataTable;\n}(React.Component);\nvar GoogleChartEvents = /*#__PURE__*/function (_React$Component3) {\n  _inherits(GoogleChartEvents, _React$Component3);\n  var _super3 = _createSuper(GoogleChartEvents);\n  function GoogleChartEvents(props) {\n    var _this3;\n    _classCallCheck(this, GoogleChartEvents);\n    _this3 = _super3.call(this, props);\n    _this3.propsFromContext = null;\n    return _this3;\n  }\n  _createClass(GoogleChartEvents, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"listenToEvents\",\n    value: function listenToEvents(param) {\n      var _this4 = this;\n      var chartEvents = param.chartEvents,\n        google = param.google,\n        googleChartWrapper = param.googleChartWrapper;\n      if (!chartEvents) {\n        return;\n      }\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      var _iterator3 = _createForOfIteratorHelper(chartEvents),\n        _step3;\n      try {\n        var _loop = function _loop() {\n            var event = _step3.value;\n            _this = _this4;\n            var eventName = event.eventName,\n              callback = event.callback;\n            google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              callback({\n                chartWrapper: googleChartWrapper,\n                props: _this.props,\n                google: google,\n                eventArgs: args\n              });\n            });\n          },\n          _this;\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var ref;\n      var _this$props3 = this.props,\n        google = _this$props3.google,\n        googleChartWrapper = _this$props3.googleChartWrapper;\n      this.listenToEvents({\n        chartEvents: ((ref = this.propsFromContext) === null || ref === void 0 ? void 0 : ref.chartEvents) || null,\n        google: google,\n        googleChartWrapper: googleChartWrapper\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n      this.props;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(propsFromContext) {\n          _this5.propsFromContext = propsFromContext;\n          return null;\n        }\n      });\n    }\n  }]);\n  return GoogleChartEvents;\n}(React.Component);\nvar controlCounter = 0;\nvar GoogleChart = /*#__PURE__*/function (_React$Component4) {\n  _inherits(GoogleChart, _React$Component4);\n  var _super4 = _createSuper(GoogleChart);\n  function GoogleChart() {\n    var _this6;\n    for (var _len3 = arguments.length, args1 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args1[_key3] = arguments[_key3];\n    }\n    _classCallCheck(this, GoogleChart);\n    var _this1;\n    _this6 = _super4.call.apply(_super4, [this].concat(args1)), _this1 = _assertThisInitialized(_this6);\n    _this6.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    _this6.graphID = null;\n    _this6.dashboard_ref = /*#__PURE__*/React.createRef();\n    _this6.toolbar_ref = /*#__PURE__*/React.createRef();\n    _this6.getGraphID = function () {\n      var _this6$props = _this6.props,\n        graphID = _this6$props.graphID,\n        graph_id = _this6$props.graph_id;\n      var instanceGraphID;\n      if (!graphID && !graph_id) {\n        if (!_this6.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = _this6.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n      _this6.graphID = instanceGraphID;\n      return _this6.graphID;\n    };\n    _this6.getControlID = function (id, index) {\n      controlCounter += 1;\n      var controlID;\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n      return controlID;\n    };\n    _this6.addControls = function (googleChartWrapper, googleChartDashboard) {\n      var _this6$props2 = _this6.props,\n        google = _this6$props2.google,\n        controls = _this6$props2.controls;\n      var googleChartControls = !controls ? null : controls.map(function (control, i) {\n        var controlIDMaybe = control.controlID,\n          controlType = control.controlType,\n          controlOptions = control.options,\n          controlWrapperParams = control.controlWrapperParams;\n        var controlID = _this6.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper(_objectSpread({\n            containerId: controlID,\n            controlType: controlType,\n            options: controlOptions\n          }, controlWrapperParams))\n        };\n      });\n      if (!googleChartControls) {\n        return null;\n      }\n      googleChartDashboard.bind(googleChartControls.map(function (param) {\n        var control = param.control;\n        return control;\n      }), googleChartWrapper);\n      var _iterator4 = _createForOfIteratorHelper(googleChartControls),\n        _step4;\n      try {\n        var _loop2 = function _loop2() {\n            var chartControl = _step4.value;\n            var control = chartControl.control,\n              controlProp = chartControl.controlProp;\n            var _controlProp$controlE = controlProp.controlEvents,\n              controlEvents = _controlProp$controlE === void 0 ? [] : _controlProp$controlE;\n            var _iterator5 = _createForOfIteratorHelper(controlEvents),\n              _step5;\n            try {\n              var _loop3 = function _loop3() {\n                var event = _step5.value;\n                _this = _assertThisInitialized(_this6);\n                var callback = event.callback,\n                  eventName = event.eventName;\n                google.visualization.events.removeListener(control, eventName, callback);\n                google.visualization.events.addListener(control, eventName, function () {\n                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                  }\n                  callback({\n                    chartWrapper: googleChartWrapper,\n                    controlWrapper: control,\n                    props: _this.props,\n                    google: google,\n                    eventArgs: args\n                  });\n                });\n              };\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                _loop3();\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          },\n          _this;\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          _loop2();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return googleChartControls;\n    };\n    _this6.renderChart = function () {\n      var _this6$props3 = _this6.props,\n        width = _this6$props3.width,\n        height = _this6$props3.height,\n        options = _this6$props3.options,\n        style = _this6$props3.style,\n        className = _this6$props3.className,\n        rootProps = _this6$props3.rootProps,\n        google = _this6$props3.google;\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: _this6.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), _this6.state.isReady && _this6.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: _this6.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: _this6.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: _this6.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n    _this6.renderControl = function () {\n      var filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function (param) {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(function (param) {\n        var controlProp = param.controlProp,\n          control = param.control;\n        return filter({\n          control: control,\n          controlProp: controlProp\n        });\n      }).map(function (param) {\n        var control = param.control,\n          controlProp = param.controlProp;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n    _this6.renderToolBar = function () {\n      if (!_this6.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: _this6.toolbar_ref\n      });\n    };\n    return _this6;\n  }\n  _createClass(GoogleChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n        options = _this$props4.options,\n        google = _this$props4.google,\n        chartType = _this$props4.chartType,\n        chartWrapperParams = _this$props4.chartWrapperParams,\n        toolbarItems = _this$props4.toolbarItems,\n        getChartEditor = _this$props4.getChartEditor,\n        getChartWrapper = _this$props4.getChartWrapper;\n      var chartConfig = _objectSpread({\n        chartType: chartType,\n        options: options,\n        containerId: this.getGraphID()\n      }, chartWrapperParams);\n      var googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n      googleChartWrapper.setOptions(options || {});\n      if (getChartWrapper) {\n        getChartWrapper(googleChartWrapper, google);\n      }\n      var googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n      var googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n      if (toolbarItems) {\n        google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n      }\n      var googleChartEditor = null;\n      if (getChartEditor) {\n        googleChartEditor = new google.visualization.ChartEditor();\n        getChartEditor({\n          chartEditor: googleChartEditor,\n          chartWrapper: googleChartWrapper,\n          google: google\n        });\n      }\n      this.setState({\n        googleChartEditor: googleChartEditor,\n        googleChartControls: googleChartControls,\n        googleChartDashboard: googleChartDashboard,\n        googleChartWrapper: googleChartWrapper,\n        isReady: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.state.googleChartWrapper) return;\n      if (!this.state.googleChartDashboard) return;\n      if (!this.state.googleChartControls) return;\n      var controls = this.props.controls;\n      if (controls) {\n        for (var i = 0; i < controls.length; i += 1) {\n          var _controls$i = controls[i],\n            controlType = _controls$i.controlType,\n            options = _controls$i.options,\n            controlWrapperParams = _controls$i.controlWrapperParams;\n          if (controlWrapperParams && \"state\" in controlWrapperParams) {\n            this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n          }\n          this.state.googleChartControls[i].control.setOptions(options);\n          this.state.googleChartControls[i].control.setControlType(controlType);\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        width = _this$props5.width,\n        height = _this$props5.height,\n        options = _this$props5.options,\n        style = _this$props5.style;\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n      if (this.props.render) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.toolbar_ref,\n          id: \"toolbar\"\n        }), this.props.render({\n          renderChart: this.renderChart,\n          renderControl: this.renderControl,\n          renderToolbar: this.renderToolBar\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition !== \"bottom\";\n        }), this.renderChart(), this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition === \"bottom\";\n        }), this.renderToolBar());\n      }\n    }\n  }]);\n  return GoogleChart;\n}(React.Component);\nvar Chart$1 = /*#__PURE__*/function (_React$Component5) {\n  _inherits(Chart$1, _React$Component5);\n  var _super5 = _createSuper(Chart$1);\n  function Chart$1() {\n    var _this7;\n    _classCallCheck(this, Chart$1);\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    _this7 = _super5.call.apply(_super5, [this].concat(args));\n    _this7._isMounted = false;\n    _this7.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n    _this7.onLoad = function (google1) {\n      if (_this7.props.onLoad) {\n        _this7.props.onLoad(google1);\n      }\n      if (_this7.isFullyLoaded(google1)) {\n        _this7.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        var id = setInterval(function () {\n          var google = window.google;\n          if (_this7._isMounted) {\n            if (google && _this7.isFullyLoaded(google)) {\n              clearInterval(id);\n              _this7.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n    _this7.onSuccess = function (google) {\n      _this7.setState({\n        loadingStatus: \"ready\",\n        google: google\n      });\n    };\n    _this7.onError = function () {\n      _this7.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n    return _this7;\n  }\n  _createClass(Chart$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        chartLanguage = _this$props6.chartLanguage,\n        chartPackages = _this$props6.chartPackages,\n        chartVersion = _this$props6.chartVersion,\n        mapsApiKey = _this$props6.mapsApiKey,\n        loader = _this$props6.loader,\n        errorElement = _this$props6.errorElement;\n      return /*#__PURE__*/React.createElement(ContextProvider, {\n        value: this.props\n      }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n        google: this.state.google\n      })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n        chartLanguage: chartLanguage,\n        chartPackages: chartPackages,\n        chartVersion: chartVersion,\n        mapsApiKey: mapsApiKey,\n        onLoad: this.onLoad,\n        onError: this.onError\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"isFullyLoaded\",\n    value: function isFullyLoaded(google) {\n      var _this$props7 = this.props,\n        controls = _this$props7.controls,\n        toolbarItems = _this$props7.toolbarItems,\n        getChartEditor = _this$props7.getChartEditor;\n      return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n  }]);\n  return Chart$1;\n}(React.Component);\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","param","_param$chartVersion","chartVersion","_param$chartPackages","chartPackages","_param$chartLanguage","chartLanguage","mapsApiKey","_useState","useState","_useState2","_slicedToArray","googleCharts","setGoogleCharts","_useState3","_useState4","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","_objectWithoutProperties","_excluded","_useLoadGoogleCharts","_useLoadGoogleCharts2","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","googleViz","spreadSheetUrl","urlParams","_args","arguments","wrap","_callee$","_context","prev","next","length","abrupt","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","stop","_x","_x2","apply","_React$createContext","React","createContext","Provider","Consumer","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","_React$Component","_inherits","_super","_createSuper","_this2","state","hiddenColumns","listenToLegendToggle","_this2$props","props","googleChartWrapper","events","addListener","chart","getChart","selection","getSelection","dataTable","row","columnIndex","column","columnID","getColumnID","includes","setState","_objectSpread","_toConsumableArray","filter","colID","applyFormatters","formatters","_iterator","_createForOfIteratorHelper","_step","s","n","done","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","_iterator2","_step2","range","addRange","err","e","f","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","_ref2","_callee2","data","diffdata","rows","columns","chartType","_this2$props2","chartDiff","oldData","newData","columnCount","i","previousColumnLabel","previousColumnID","previousColumnType","_callee2$","_context2","arrayToDataTable","old","new","prototype","computeDiff","Array","isArray","DataTable","sent","getNumberOfColumns","getColumnType","removeColumn","addColumn","label","id","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","_x3","hasAHiddenColumn","colors","from","map","dontcare","onResize","componentDidMount","key","componentWillUnmount","_this$props","removeAllListeners","componentDidUpdate","Component","GoogleChartDataTable","_React$Component2","_super2","_classCallCheck","_createClass","shouldComponentUpdate","_this$props2","Object","assign","GoogleChartEvents","_React$Component3","_super3","_this3","call","propsFromContext","listenToEvents","_this4","chartEvents","_iterator3","_step3","_loop","event","eventName","callback","args","_len","_key","chartWrapper","_this","eventArgs","ref","_this$props3","_this5","controlCounter","GoogleChart","_React$Component4","_super4","_this6","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","createRef","toolbar_ref","getGraphID","_this6$props","graph_id","instanceGraphID","getControlID","index","controlID","addControls","_this6$props2","controls","control","controlIDMaybe","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","bind","_iterator4","_step4","_loop2","chartControl","_controlProp$controlE","controlEvents","_iterator5","_step5","_loop3","removeListener","controlWrapper","renderChart","_this6$props3","width","height","style","className","divStyle","Fragment","renderControl","_this1","getContainerId","renderToolBar","toolbarItems","_this$props4","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","ChartEditor","chartEditor","_controls$i","setControlType","nextProps","nextState","_this$props5","renderToolbar","controlPosition","Chart$1","_React$Component5","_super5","_this7","_isMounted","loadingStatus","google1","isFullyLoaded","onSuccess","setInterval","clearInterval","_this$props6","loader","errorElement","_this$props7","defaultProps","GoogleDataTableColumnRoleType","Chart"],"sources":["D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\hooks\\useLoadScript.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\hooks\\useLoadGoogleCharts.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\default-props.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\generate-unique-id.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\constants.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\load-data-table-from-spreadsheet.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\Context.tsx","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\components\\GoogleChartDataTable.tsx","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\components\\GoogleChartEvents.tsx","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\components\\GoogleChart.tsx","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\ReactGoogleCharts.tsx","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\types.ts","D:\\TMDT\\GreenLifeWebsite\\fe\\node_modules\\react-google-charts\\src\\index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  propsFromContext: ReactGoogleChartProps | null;\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n\n  componentDidMount() {\n    const { google, googleChartWrapper } = this.props;\n\n    this.listenToEvents({\n      chartEvents: this.propsFromContext?.chartEvents || null,\n      google,\n      googleChartWrapper,\n    });\n  }\n\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.propsFromContext = propsFromContext;\n          return null;\n        }}\n      />\n    );\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.propsFromContext = null;\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}